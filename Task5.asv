clear;
close all;

K = 0.397; 
L = 
J = 
R = 
T_f = 


K_0 = 0.397; 
L_0 = 0.2*10^-4;
J_0 = 1.3*10^-5;
R_0 = 1.77;
T_f_0 = 0.115;
V_0 = 12;
duty_cycle_0 = 20; %percentage
T_l_min = 0;
T_l_max = 3;
T_l_range = T_l_min:0.01:T_l_max;
N_Tl = size(T_l_range);

T_l_0 = 0.3;
error_duty_cycle = 0.25;
error_T_l = 0.15;
error_V = 0.375;
error = 0.2;

val = [K_0, L_0, J_0, R_0, T_f_0, T_l_0, duty_cycle_0, V_0];
err = [error, error, error, error, error, error_T_l, error_duty_cycle, error_V];
[M,N] = size(val);

frequency = 200; %hertz
period = 1/frequency;

param_matrix = zeros([2^(N-1),N]); 

DOE_matrix = [
    1	1	-1	1	1	1	-1	1
    1	1	1	-1	1	-1	-1	-1
    1	-1	1	-1	1	1	1	1
    1	1	1	-1	1	1	-1	1
    -1	-1	-1	-1	-1	-1	1	1
    -1	1	-1	-1	1	-1	1	1
    -1	1	-1	-1	1	-1	-1	-1
    1	-1	1	1	-1	1	1	1
    -1	-1	-1	-1	1	1	-1	-1
    1	1	1	1	-1	-1	-1	-1
    -1	-1	-1	1	1	1	-1	1
    1	1	1	-1	-1	-1	1	-1
    -1	1	1	1	1	-1	1	1
    1	1	-1	1	1	1	1	-1
    1	1	1	1	1	1	1	1
    1	-1	1	-1	-1	1	1	-1
    -1	-1	1	1	1	-1	-1	1
    -1	1	1	1	-1	1	1	1
    1	1	1	1	-1	1	-1	1
    1	1	-1	1	-1	-1	-1	1
    -1	1	-1	-1	-1	1	1	1
    -1	1	1	1	1	-1	-1	-1
    -1	1	1	1	-1	-1	-1	1
    -1	-1	-1	-1	-1	-1	-1	-1
    1	1	1	1	-1	-1	1	1
    1	1	1	-1	1	1	1	-1
    -1	-1	1	1	-1	1	-1	1
    1	1	1	-1	-1	-1	-1	1
    -1	1	-1	1	-1	-1	1	1
    1	-1	-1	-1	1	-1	-1	-1
    1	1	-1	-1	1	1	-1	-1
    -1	-1	1	-1	1	-1	-1	-1
    1	-1	-1	-1	1	1	1	-1
    -1	-1	1	-1	-1	-1	-1	1
    1	-1	1	1	1	1	-1	1
    -1	1	1	-1	-1	-1	1	1
    1	-1	-1	1	-1	-1	1	1
    -1	1	-1	1	1	-1	1	-1
    1	-1	-1	1	-1	1	-1	1
    1	-1	-1	-1	-1	-1	-1	1
    -1	-1	1	-1	1	1	-1	1
    -1	-1	1	1	-1	-1	1	1
    -1	1	-1	1	-1	-1	-1	-1
    1	1	1	-1	-1	1	1	1
    -1	-1	1	1	1	-1	1	-1
    -1	1	1	1	-1	-1	1	-1
    1	-1	1	1	-1	-1	1	-1
    -1	1	1	-1	-1	1	-1	1
    -1	1	-1	1	1	1	1	1
    1	-1	1	-1	1	1	-1	-1
    1	-1	1	1	1	-1	-1	-1
    1	-1	-1	-1	-1	1	-1	-1
    -1	-1	-1	-1	-1	1	-1	1
    -1	1	1	-1	-1	1	1	-1
    1	-1	1	1	1	1	1	-1
    -1	1	-1	1	1	-1	-1	1
    -1	-1	-1	-1	1	-1	1	-1
    1	-1	-1	-1	-1	1	1	1
    -1	1	1	1	1	1	-1	1
    1	-1	1	-1	-1	-1	-1	-1
    1	-1	-1	1	1	-1	-1	1
    -1	-1	1	1	-1	-1	-1	-1
    -1	1	-1	-1	1	1	-1	1
    1	1	1	1	1	-1	1	-1
    -1	-1	-1	-1	-1	1	1	-1
    1	-1	1	1	-1	-1	-1	1
    1	1	-1	-1	-1	1	-1	1
    -1	1	1	-1	1	-1	-1	1
    -1	-1	-1	-1	1	1	1	1
    1	1	1	1	1	-1	-1	1
    -1	1	1	1	1	1	1	-1
    1	-1	-1	1	1	1	-1	-1
    1	-1	-1	-1	1	1	-1	1
    1	-1	-1	1	1	-1	1	-1
    -1	-1	1	1	1	1	1	1
    -1	-1	-1	1	1	1	1	-1
    1	1	-1	-1	1	-1	-1	1
    -1	-1	-1	1	-1	-1	-1	1
    1	-1	1	-1	1	-1	-1	1
    1	1	1	-1	-1	1	-1	-1
    1	1	-1	-1	-1	-1	1	1
    1	1	1	1	-1	1	1	-1
    -1	-1	1	-1	-1	1	1	1
    -1	1	-1	-1	-1	-1	-1	1
    1	-1	-1	1	-1	1	1	-1
    1	-1	-1	-1	1	-1	1	1
    -1	1	1	-1	-1	-1	-1	-1
    -1	-1	-1	1	-1	1	-1	-1
    1	1	-1	1	-1	-1	1	-1
    1	1	-1	-1	1	1	1	1
    1	1	-1	1	1	-1	1	1
    1	1	1	-1	1	-1	1	1
    1	1	-1	-1	-1	-1	-1	-1
    1	-1	1	-1	1	-1	1	-1
    -1	1	-1	1	-1	1	-1	1
    1	1	-1	-1	1	-1	1	-1
    -1	1	-1	-1	-1	-1	1	-1
    1	1	-1	1	1	-1	-1	-1
    1	-1	-1	1	1	1	1	1
    1	-1	1	-1	-1	-1	1	1
    -1	-1	1	-1	1	1	1	-1
    -1	-1	-1	-1	1	-1	-1	1
    -1	-1	1	-1	-1	-1	1	-1
    -1	1	-1	1	-1	1	1	-1
    -1	1	1	1	-1	1	-1	-1
    1	-1	1	-1	-1	1	-1	1
    -1	1	-1	-1	-1	1	-1	-1
    -1	-1	-1	1	1	-1	1	1
    1	-1	-1	-1	-1	-1	1	-1
    -1	-1	-1	1	1	-1	-1	-1
    -1	-1	-1	1	-1	-1	1	-1
    -1	1	1	-1	1	1	-1	-1
    1	-1	-1	1	-1	-1	-1	-1
    -1	-1	1	-1	-1	1	-1	-1
    1	1	-1	1	-1	1	1	1
    -1	-1	1	1	-1	1	1	-1
    -1	1	-1	1	1	1	-1	-1
    -1	1	1	-1	1	-1	1	-1
    1	-1	1	1	1	-1	1	1
    1	1	-1	1	-1	1	-1	-1
    1	-1	1	1	-1	1	-1	-1
    -1	-1	1	-1	1	-1	1	1
    -1	1	-1	-1	1	1	1	-1
    -1	-1	1	1	1	1	-1	-1
    -1	-1	-1	1	-1	1	1	1
    1	1	-1	-1	-1	1	1	-1
    1	1	1	1	1	1	-1	-1
    -1	1	1	-1	1	1	1	1
 ];

for i=1:N
    for j=1:2^(N-1)
        if (DOE_matrix(j,i)==1)
            param_matrix(j,i)= val(i) + val(i)*err(i);
        else
            param_matrix(j,i)= val(i) - val(i)*err(i);
        end
    end
end


for i=1:2^(N-1)
    K = param_matrix(i,1); 
    L = param_matrix(i,2);
    J = param_matrix(i,3);
    R = param_matrix(i,4);
    T_f = param_matrix(i,5);
    T_l = param_matrix(i,6);
    duty_cycle = param_matrix(i,7);
    V = param_matrix(i,8);
    for j = 1:N_Tl(:,2)
        T_l = T_l_range(1,j);
        output = sim('motor_current_speed', [0:0.001:0.8]);
        t = output.tout;
        current = output.yout{1}.Values.Data;
        speed = output.yout{2}.Values.Data;

        t_steady_state_range = (t >= 0.7) & (t <= 0.8);
        current_SS(1, j) = mean(current(t_steady_state_range));
        speed_SS(1, j) = mean(speed(t_steady_state_range));
        efficiency(j, 1) = 100*(T_l*speed_SS(1, j)/9.5493)/(V*current_SS(1, j));  
        max_efficiency(
    end
end
